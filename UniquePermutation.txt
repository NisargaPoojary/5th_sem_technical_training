package permutation;
import java.util.Scanner;
public class permutation {
	    public static void main(String[] args) {
	        Scanner scan = new Scanner(System.in);
	        System.out.print("Enter the string: ");
	        String input = scan.nextLine();
	        String[] permutations = findPermutations(input);
	        System.out.println("Unique Permutations:");
	        for (String perm : permutations) {
	            System.out.print(perm + " ");
	        }
	        scan.close();
	    }

	    public static String[] findPermutations(String str) {
	        int n = str.length();
	        int factorial = factorial(n);
	        String[] result = new String[factorial];
	        char[] chars = str.toCharArray();
	        sort(chars);
	        findPermutationsHelper(chars, 0, result);
	        return result;
	    }

	    private static void findPermutationsHelper(char[] chars, int index, String[] result) {
	        if (index == chars.length - 1) {
	            result[0] = new String(chars);
	            return;
	        }

	        int count = 0;
	        for (int i = index; i < chars.length; i++) {
	            if (i == index || chars[i] != chars[index]) {
	                char temp = chars[index];
	                chars[index] = chars[i];
	                chars[i] = temp;

	                findPermutationsHelper(chars, index + 1, result);
	                temp = chars[index];
	                chars[index] = chars[i];
	                chars[i] = temp;

	                count++;
	            }
	        }

	        for (int i = 0; i < count; i++) {
	            result[i] = new String(chars);
	        }
	    }

	    private static void sort(char[] chars) {
	        for (int i = 0; i < chars.length - 1; i++) {
	            for (int j = i + 1; j < chars.length; j++) {
	                if (chars[i] > chars[j]) {
	                    char temp = chars[i];
	                    chars[i] = chars[j];
	                    chars[j] = temp;
	                }
	            }
	        }
	    }

	    private static int factorial(int n) {
	        if (n <= 1) {
	            return 1;
	        }
	        return n * factorial(n - 1);
	    }
	}

